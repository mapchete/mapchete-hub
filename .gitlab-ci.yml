image: docker/compose:1.29.2

stages:
  - build
  - test
  - push

# build python packages
build_python_package:
  image: python:3.10-slim-buster
  stage: build
  artifacts:
    paths:
      - dist/
  before_script:
    - pip install --upgrade pip hatch
  script:
    - hatch build

# build docker image for mhub
build_docker_mhub:
  stage: build
  artifacts:
    paths:
      - pip/
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - >
      docker build \
        --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
        --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN} \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} .
  after_script:
    # run pip check
    - >
      docker run \
        --rm \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} \
        /bin/bash -c "pip check"
    # dump installed package versions as artefact
    - mkdir pip
    - >
      docker run \
        --rm \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} \
        /bin/bash -c "pip freeze" > pip/${IMAGE_NAME}_installed.txt
    - less pip/${IMAGE_NAME}_installed.txt

# test python packages
test_python_wheel:
  image: registry.gitlab.eox.at/maps/docker-base/mapchete:2022.11.1
  needs: ["build_python_package"]
  stage: test
  before_script:
    - pip install `ls dist/mapchete_hub*.tar.gz -1 | head -1`[test]
  script:
    - mhub-server --help
    - pytest -v --cov=mapchete_hub tests/

test_python_tar:
  image: registry.gitlab.eox.at/maps/docker-base/mapchete:2022.11.1
  needs: ["build_python_package"]
  stage: test
  before_script:
    - pip install `ls dist/mapchete_hub*.tar.gz -1 | head -1`[test]
  script:
    - mhub-server --help
    - pytest -v --cov=mapchete_hub tests/

# run unittests
test_unit_mhub:
  stage: test
  image: registry.gitlab.eox.at/maps/docker-base/mapchete:2022.11.1
  needs: ["build_docker_mhub"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements_test.txt
    - pip install
      --extra-index-url https://__token__:${EOX_PYPI_TOKEN}@gitlab.eox.at/api/v4/projects/255/packages/pypi/simple
      --upgrade
      -e .
  script:
    - pytest -v --cov=mapchete_hub tests/
  after_script:
    - coverage report

# test mapchete_hub package in built images
test_integration_mhub:
  stage: test
  needs: ["build_docker_mhub"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
    MHUB_ENV: testing
  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    # run tests
    - /bin/sh run_integration_tests.sh

# push images to registry
push_docker_mhub:
  stage: push
  needs: ["test_unit_mhub", "test_integration_mhub"]
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    - echo "push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}..."
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}

# also tag and push a tagged commit, i.e. a new version
push_docker_tag:
  stage: push
  variables:
    # we don't need the source code here
    GIT_STRATEGY: none
  only:
    - tags
  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    # mhub
    - >
      docker tag \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_SHORT_SHA} \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}
    - >
      docker push \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}

# release package
push_python_package:
  image: python:3.10-slim-buster
  stage: push
  before_script:
    - pip install --upgrade pip hatch
  script:
    - hatch publish -r https://gitlab.eox.at/api/v4/projects/255/packages/pypi dist/mapchete_hub*
  only:
    - tags
