image: docker/compose:1.26.0

stages:
  - build
  - test
  - push

default:
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # tag as "latest" if current branch is master, else use branch name
    - export IMAGE_TAG=`if [ "$CI_COMMIT_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_COMMIT_REF_NAME; fi`

# build docker images for mhub and mhub-s1
build_mhub:
  stage: build
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - docker build --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} .

build_mhub-s1:
  stage: build
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete
  script:
    - docker build --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} .

# test mapchete_hub package in built images
test_mhub:
  stage: test
  retry: 3
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
    MHUB_ENV: testing
    MHUB_PORT: 5005
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # tag as "latest" if current branch is master, else use branch name
    - export IMAGE_TAG=`if [ "$CI_COMMIT_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_COMMIT_REF_NAME; fi`
    - docker-compose -p ${CI_REGISTRY_IMAGE}-${IMAGE_NAME}-${IMAGE_TAG} -f docker-compose.yml -f docker-compose.test.yml build
  script:
    # run tests
    - docker-compose -p ${CI_REGISTRY_IMAGE}-${IMAGE_NAME}-${IMAGE_TAG} -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from mhub_tester
  after_script:
    - docker-compose -p ${CI_REGISTRY_IMAGE}-${IMAGE_NAME}-${IMAGE_TAG} -f docker-compose.yml -f docker-compose.test.yml rm -fv

test_mhub-s1:
  stage: test
  retry: 3
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete
    MHUB_ENV: testing
    MHUB_PORT: 5006
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # tag as "latest" if current branch is master, else use branch name
    - export IMAGE_TAG=`if [ "$CI_COMMIT_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_COMMIT_REF_NAME; fi`
    - docker-compose -p ${CI_REGISTRY_IMAGE}-${IMAGE_NAME}-${IMAGE_TAG} -f docker-compose.yml -f docker-compose.test.yml build
  script:
    # run tests
    - docker-compose -p ${CI_REGISTRY_IMAGE}-${IMAGE_NAME}-${IMAGE_TAG} -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from mhub_tester
  after_script:
    - docker-compose -p ${CI_REGISTRY_IMAGE}-${IMAGE_NAME}-${IMAGE_TAG} -f docker-compose.yml -f docker-compose.test.yml rm -fv

# push images to registry
push_mhub:
  stage: push
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}

push_mhub-s1:
  stage: push
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete
  script:
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}


# also tag and push a tagged commit, i.e. a new version
push_tag:
  stage: push
  variables:
    # we don't need the source code here
    GIT_STRATEGY: none
  only:
    - tags
  script:
    # mhub
    - docker tag ${CI_REGISTRY_IMAGE}/mhub:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}
    - docker push ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}
    # mhub-s1
    - docker tag ${CI_REGISTRY_IMAGE}/mhub-s1:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_REF_NAME}
    - docker push ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_REF_NAME}
