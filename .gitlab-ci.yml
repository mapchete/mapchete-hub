image: docker/compose:1.26.0

stages:
  - build
  - test
  - push

default:
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

# build docker images for mhub and mhub-s1
build_mhub:
  stage: build
  artifacts:
    paths:
      - pip/
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - >
      docker build \
        --network host \
        --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
        --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN} \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} .
  after_script:
    # dump installed package versions as artefact
    - mkdir pip
    - >
      docker run \
        --rm \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} \
        /bin/bash -c "pip freeze" > pip/${IMAGE_NAME}_installed.txt
    - less pip/${IMAGE_NAME}_installed.txt

build_mhub-s1:
  stage: build
  artifacts:
    paths:
      - pip/
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete-ost
  script:
    - >
      docker build \
        --network host \
        --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
        --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN} \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} .
  after_script:
    # dump installed package versions as artefact
    - mkdir pip
    - >
      docker run \
        --rm \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} \
        /bin/bash -c "pip freeze" > pip/${IMAGE_NAME}_installed.txt
    - less pip/${IMAGE_NAME}_installed.txt

# run unittests
unit_mhub:
  stage: test
  image: registry.gitlab.eox.at/maps/docker-base/mapchete:2022.4.0
  needs: ["build_mhub"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements_test.txt
    - pip install
      --extra-index-url https://__token__:${EOX_PYPI_TOKEN}@gitlab.eox.at/api/v4/projects/255/packages/pypi/simple
      --upgrade
      -e .
  script:
    - pytest -v --cov=mapchete_hub tests/
  after_script:
    - coverage report

unit_mhub-s1:
  stage: test
  image: registry.gitlab.eox.at/maps/docker-base/snap-mapchete-ost:2022.4.0
  needs: ["build_mhub-s1"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements_test.txt
    - pip install
      --extra-index-url https://__token__:${EOX_PYPI_TOKEN}@gitlab.eox.at/api/v4/projects/255/packages/pypi/simple
      --upgrade
      -e .
  script:
    - pytest -v --cov=mapchete_hub tests/
  after_script:
    - coverage report

# test mapchete_hub package in built images
integration_mhub:
  stage: test
  needs: ["build_mhub"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
    MHUB_ENV: testing
  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    # run tests
    - /bin/sh run_integration_tests.sh

integration_mhub-s1:
  stage: test
  needs: ["build_mhub-s1"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete-ost
    MHUB_ENV: testing
  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    # run tests
    - /bin/sh run_integration_tests.sh

# push images to registry
push_mhub:
  stage: push
  needs: ["unit_mhub", "integration_mhub"]
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - echo "push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}..."
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then \
      docker tag \
        ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} \
        ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest; \
      docker push \
        ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest; \
      fi;

push_mhub-s1:
  stage: push
  needs: ["unit_mhub-s1", "integration_mhub-s1"]
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete-ost
  script:
    - echo "push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}..."
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then \
      docker tag \
        ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} \
        ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest; \
      docker push \
        ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest; \
      fi;

# also tag and push a tagged commit, i.e. a new version
push_tag:
  stage: push
  variables:
    # we don't need the source code here
    GIT_STRATEGY: none
  only:
    - tags
  script:
    # mhub
    - >
      docker tag \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_SHORT_SHA} \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}
    - >
      docker push \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}
    # mhub-s1
    - >
      docker tag \
        ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_SHORT_SHA} \
        ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_REF_NAME}
    - >
      docker push \
        ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_REF_NAME}
