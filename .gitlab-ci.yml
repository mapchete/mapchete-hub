image: docker/compose:1.26.0

stages:
  - build
  - test
  - push

default:
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # tag as "latest" if current branch is master, else use branch name
    - export IMAGE_TAG=`if [ "$CI_COMMIT_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_COMMIT_REF_NAME; fi`

# build docker images for mhub and mhub-s1
build_mhub:
  stage: build
  artifacts:
    paths:
      - pip/
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - >
      docker build \
        --no-cache \
        --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
        --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN} \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} .
  after_script:
    # dump installed package versions as artefact
    - >
      docker run \
        --rm \
        -it ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} \
        /bin/bash -c "pip freeze" > pip/${IMAGE_NAME}_installed.txt

build_mhub-s1:
  stage: build
  artifacts:
    paths:
      - pip/
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete-ost
  script:
    - >
      docker build \
        --no-cache \
        --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
        --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN} \
        -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} .
  after_script:
    # dump installed package versions as artefact
    - >
      docker run \
        --rm \
        -it ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} \
        /bin/bash -c "pip freeze" > pip/${IMAGE_NAME}_installed.txt

# test mapchete_hub package in built images
test_mhub:
  stage: test
  needs: ["build_mhub"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
    MHUB_ENV: testing
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # tag as "latest" if current branch is master, else use branch name
    - export IMAGE_TAG=`if [ "$CI_COMMIT_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_COMMIT_REF_NAME; fi`
    # - >
    #   docker-compose \
    #     -p $CI_JOB_ID \
    #     -f docker-compose.yml \
    #     -f docker-compose.test.yml \
    #     build \
    #     --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
    #     --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN}
    - export MHUB_PORT=$(( 5000 + $RANDOM % 1000 ))
  script:
    # run tests
    - echo "run mhub on port ${MHUB_PORT}"
    - >
      docker-compose \
        -p $CI_JOB_ID \
        -f docker-compose.yml \
        -f docker-compose.test.yml \
        up \
        --build \
        --exit-code-from mhub_tester

  after_script:
    - >
      docker-compose \
        -p $CI_JOB_ID \
        -f docker-compose.yml \
        -f docker-compose.test.yml \
        down \
        -v \
        --rmi all \
        --remove-orphans \
      || true
    - >
      docker-compose \
        -p $CI_JOB_ID \
        -f docker-compose.yml \
        -f docker-compose.test.yml \
        rm -fv \
      || true

test_mhub-s1:
  stage: test
  needs: ["build_mhub-s1"]
  timeout: 30m
  variables:
    EOX_PYPI_TOKEN: ${EOX_PYPI_TOKEN}
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete-ost
    MHUB_ENV: testing
  before_script:
    - docker info
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # tag as "latest" if current branch is master, else use branch name
    - export IMAGE_TAG=`if [ "$CI_COMMIT_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_COMMIT_REF_NAME; fi`
    # - >
    #   docker-compose \
    #     -p $CI_JOB_ID \
    #     -f docker-compose.yml \
    #     -f docker-compose.test.yml \
    #     build \
    #     --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
    #     --build-arg EOX_PYPI_TOKEN=${EOX_PYPI_TOKEN}
    - export MHUB_PORT=$(( 5000 + $RANDOM % 1000 ))
  script:
    # run tests
    - echo "run mhub on port ${MHUB_PORT}"
    - >
      docker-compose \
        -p $CI_JOB_ID \
        -f docker-compose.yml \
        -f docker-compose.test.yml \
        up \
        --build \
        --exit-code-from mhub_tester

  after_script:
    - >
      docker-compose \
        -p $CI_JOB_ID \
        -f docker-compose.yml \
        -f docker-compose.test.yml \
        down \
        -v \
        --rmi all \
        --remove-orphans \
      || true
    - >
      docker-compose \
        -p $CI_JOB_ID \
        -f docker-compose.yml \
        -f docker-compose.test.yml \
        rm -fv \
      || true

# push images to registry
push_mhub:
  stage: push
  needs: ["test_mhub"]
  variables:
    IMAGE_NAME: mhub
    BASE_IMAGE_NAME: mapchete
  script:
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} --all-tags

push_mhub-s1:
  stage: push
  needs: ["test_mhub-s1"]
  variables:
    IMAGE_NAME: mhub-s1
    BASE_IMAGE_NAME: snap-mapchete-ost
  script:
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} --all-tags


# also tag and push a tagged commit, i.e. a new version
push_tag:
  stage: push
  variables:
    # we don't need the source code here
    GIT_STRATEGY: none
  only:
    - tags
  script:
    # mhub
    - >
      docker tag \
        ${CI_REGISTRY_IMAGE}/mhub:${IMAGE_TAG} \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME}
    - >
      docker push \
        ${CI_REGISTRY_IMAGE}/mhub:${CI_COMMIT_REF_NAME} --all-tags
    # mhub-s1
    - >
      docker tag \
        ${CI_REGISTRY_IMAGE}/mhub-s1:${IMAGE_TAG} \
        ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_REF_NAME}
    - >
      docker push \
        ${CI_REGISTRY_IMAGE}/mhub-s1:${CI_COMMIT_REF_NAME} --all-tags
